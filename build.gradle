plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id "org.jetbrains.kotlin.jvm" version "1.3.72"

    // Apply the application plugin to add support for building a CLI application.
    id "idea"
    id "application"
}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    vNd4j = "1.0.0-beta7"
}

dependencies {
    implementation platform("org.jetbrains.kotlin:kotlin-bom")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "io.github.microutils:kotlin-logging:1.8.3"
    implementation "ch.qos.logback:logback-classic:1.2.3"

    implementation("org.choco-solver:choco-solver:4.10.2") {
        exclude(group: "org.knowm.xchart")
        exclude(group: "org.jgrapht")
        exclude(group: "com.github.cp-profiler")
        exclude(group: "dk.brics.automaton")
    }

    implementation "org.openpnp:opencv:4.3.0-2"

    implementation "org.deeplearning4j:deeplearning4j-modelimport:$vNd4j"

    implementation "org.nd4j:nd4j-native-platform:$vNd4j"
//    implementation "org.nd4j:nd4j-native:$vNd4j"
//    implementation "org.nd4j:nd4j-native:$vNd4j:linux-x86_64"

    implementation("org.datavec:datavec-data-image:$vNd4j") {
        exclude(group: "org.freemarker")
        exclude(group: "com.github.jai-imageio")
//        exclude(group: "com.twelvemonkeys.imageio")
        exclude(group: "com.twelvemonkeys.imageio", module: "imageio-bmp")
        exclude(group: "com.twelvemonkeys.imageio", module: "imageio-psd")
        exclude(group: "com.twelvemonkeys.imageio", module: "imageio-tiff")

        exclude(group: "org.bytedeco", module: "artoolkitplus")
        exclude(group: "org.bytedeco", module: "ffmpeg")
        exclude(group: "org.bytedeco", module: "flandmark")
        exclude(group: "org.bytedeco", module: "flycapture")
        exclude(group: "org.bytedeco", module: "leptonica-platform")
        exclude(group: "org.bytedeco", module: "leptonica")
        exclude(group: "org.bytedeco", module: "libdc1394")
        exclude(group: "org.bytedeco", module: "libfreenect")
        exclude(group: "org.bytedeco", module: "libfreenect2")
        exclude(group: "org.bytedeco", module: "librealsense")
        exclude(group: "org.bytedeco", module: "librealsense2")
        exclude(group: "org.bytedeco", module: "tesseract")
        exclude(group: "org.bytedeco", module: "videoinput")
        exclude(group: "org.bytedeco", module: "javacv-platform")

//        exclude(group: "org.bytedeco", module: "opencv-platform")

    }

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

application {
    // Define the main class for the application.
    mainClassName = "com.github.pintowar.AppKt"
}

String osFamily() {
    def (system, arch) = ["os.name", "os.arch"].collect { System.getProperty(it).toLowerCase(Locale.ENGLISH) }
    if (!(arch in ["amd64", "x86-64", "x86_64"])) {
        throw new IllegalArgumentException("Architecture not supported")
    }
    return system.contains("mac") ? "osx" : system
}

tasks.withType(JavaExec) {
    // -Djava.library.path=/home/thiago/Projects/code/sudoku-java/lib/native/linux
//    systemProperty "java.library.path", "$rootDir/lib/native/${osFamily()}"
}

tasks.withType(Test) {
//    systemProperty "java.library.path", "$rootDir/lib/native/${osFamily()}"
}
